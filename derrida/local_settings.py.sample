# Sample local settings
# Copy to derrida/local_settings.py and configure
# includes sensitive configurations, should *not* be
# checked into version control

import os
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# SECURITY WARNING: keep the secret key used in production secret!
# http://www.miniwebtool.com/django-secret-key-generator/
SECRET_KEY = ''


# Turn this on in test/QA site to show test banner
#SHOW_TEST_WARNING = True

# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases
DATABASES = {
    # sqlite for development
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
    # mysql for qa/prod
    # 'default': {
    #     "ENGINE": "django.db.backends.mysql",
    #     'NAME': '',
    #     'USER': '',
    #     'PASSWORD': '',
    # }
}

# Haystack configuration for search/browse with Solr
HAYSTACK_CONNECTIONS = {
    'default': {
        # NOTE: must use local solr engine for range facets
        'ENGINE': 'derrida.common.solr_backend.RangeSolrEngine',
        #'ENGINE': 'haystack.backends.solr_backend.SolrEngine',
        # example multicore setup with core named derrida
        'URL': 'http://127.0.0.1:8983/solr/derrida',
        'ADMIN_URL': 'http://127.0.0.1:8983/solr/admin/cores',
    },
}

# Haystack configuration for unit tests that use Solr
HAYSTACK_TEST_CONNECTIONS = {
    'default': {
        'ENGINE': 'derrida.common.solr_backend.RangeSolrEngine',
        # example multicore setup with core named test-derrida
        'URL': 'http://127.0.0.1:8983/solr/test-derrida',
        'ADMIN_URL': 'http://127.0.0.1:8983/solr/admin/cores',
    },
}


# username for accessing GeoNames API
GEONAMES_USERNAME = ''

# mapbox access token
MAPBOX_ACCESS_TOKEN = ''

# tokens for Djiffy to access secure PUL resources
# dict of urls and tokens in key value format.
DJIFFY_AUTH_TOKENS = {}

# CAS login configuration
CAS_SERVER_URL = ''

PUCAS_LDAP.update({
    'SERVERS': [],
    'SEARCH_BASE': '',
    'SEARCH_FILTER': "(uid=%(user)s)",
})
